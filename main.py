## The colours are held by the dictionary
# The feedback is returned as a tuple of [black, white]
import random
from collections import Counter
import getpass


colours = ['R', 'B', 'Y', 'G', 'O']

def code_generator(length):
    i = 0
    while i < length:
        colour = random.randint(0, 5)
        gen_code += colours[colour]
        i = i+1

def compare(guess, soln):
    if(guess == soln):
        return "Match"
    else:
        a = Counter(guess)
        b = Counter(solution)
        correct_colours = sum((a & b).values())

        [g == s for g, s in zip(guess, solution)]
        correct_locations = sum(g == s for g, s in zip(guess, solution))

def feedback(cc, cl):
    out = []
    if(correct_colours>correct_locations):
        for i in range(correct_locations):
            out.append('B')  
        if(len(out)<(len(solution)-1)):
            for i in range(correct_colours - correct_locations):
                out.append('W')
    if(len(out)>=1):
        return(out)
    else:
        return ("Nothing")


def play():
    print("Welcome to Mastermind!")
    print("Developed by *Your Name*")
    print("COMP 1046 Object_Oriented Programming")

    print("Select which game you want to play:")
    print("(A) Original Mastermind for 2 players")
    print("(B) Original Mastermind for 1 player")
    print("(C) Mastermind44 for 4 players")
    print("****Enter A, B, or C to continue****")
    choice = input(">")
    if(choice == 'A' or 'a'):
        game.mastermind2()
    elif(choice == 'B' or 'b'):
        game.mastermind1()
    elif(choice == 'C' or 'c'):
        game.mastermind44()
    else:
        print("Invalid input!")
        print("Redirecting to main menu....")
        game.play()

class player:
    def player_init():
        p1 = input("Player 1: What is your name? \n>")
        p2 = input("Player 2: What is your name? \n>")
        p3 = input("Player 3: What is your name? \n>")
        p4 = input("Player 4: What is your name? \n>")


def mastermind2(player1, player2):
    l = 4

    print("Welcome", player1 ," you need to create a code that consists of four pegs."
    " Eeach peg can be of the colour (R)ed, B(L)ue, (G)reen, (Y)ellow, (W)hite,or (B)lack."
    " Specify the code by specifying four characters where each character indicates a colour as above."
    " For example, WWRG represents the code White-White-Red-Green. You need to enter the code twice."
    " No character is shown on the screen so Supermind cannot see it.")

    mastermind.get_code(l)
    temp1 = getpass.getpass('Enter your combination:')
    temp2 = getpass.getpass('Enter your combination again:')
    if(len(temp1) == 4):
        if(temp1 == temp2):
            soln_code = temp1
        else:
            print("The code doesn't match the one previously entered.\n Please enter the same code twice!")
            mastermind.get_code(l)
    else:
        print("The code entered isn't long enough. Enter again!")
        mastermind.get_code(l)
    
    print("Welcome to Supermind", player2, "You can now start to play by guessing the code. \n"
    "Enter a guess by providing four characters and press Enter.")
    for i in range(1,13):
        print("Attempt #", i, ":")
        guess = input(">")
        if(len(guess) == 4 and sum(Counter(guess)) == 4):
            feedback = mastermind.compare(guess, soln_code)
            if(feedback == "Match"):
                print("Congratulations! You broke the code in", i, "attempts!")
                choice = mastermind.question()
                if choice == "p" or "P":
                    mastermind.play()
                else:
                    print("Goodbye!")
                    exit()
        else:
            print("This attempt is incorrect. You must provide exactly four characters and"
                    "they can only be, R, L, G, Y, W or B.")
        print("Feedback on attempt #", i, ":", feedback)

def mastermind1(player1):
    l = 4

    print("Welcome," player1, "You have to guess the code generated by the computer"
    "The code cponsists of 4 pegs Eeach peg can be of the colour (R)ed, B(L)ue, (G)reen, (Y)ellow, 
    "(W)hite,or (B)lack. Specify the code by specifying four characters where each"
    "character indicates a colour as above. For example, WWRG represents the code White-White-Red-Green.")

    soln_code = mastermind.code_generator(4)
    for i in range(1,13):
        print("Attempt #", i, ":")
        guess = input(">")
        if(len(guess) == 4 and sum(Counter(guess)) == 4):
            feedback = mastermind.compare(guess, soln_code)
            if(feedback == "Match"):
                print("Congratulations! You broke the code in", i, "attempts!")
                choice = mastermind.question()
                if choice == "p" or "P":
                    mastermind.play()
                else:
                    print("Goodbye!")
                    exit()
        else:
            print("This attempt is incorrect. You must provide exactly four characters and"
                    "they can only be, R, L, G, Y, W or B.")
        print("Feedback on attempt #", i, ":", feedback)

def mastermind44(player1, player2, player3, player4):
    l = 5
    

    

